<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item2" object-name="workflow:name=generic" id="e3b2fee5-6ba6-4594-a2b3-463dc2361cae" editor-version="1.6" version="0.0.1" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
    <display-name>Create active record for 'NasVolume'</display-name>
    <description>Creates volume entry in 2 tables: NasVolume + NasVolumeArchive</description>
    <position y="20.0" x="180.0"/>
    <input>
        <param name="volType" type="string">
            <description>Volume type</description>
        </param>
        <param name="volId" type="string"/>
        <param name="volName" type="string">
            <description>Volume name</description>
        </param>
        <param name="deploymentTag" type="string">
            <description>Environment</description>
        </param>
        <param name="requestor" type="string">
            <description>Requestor</description>
        </param>
        <param name="notificationMail" type="string">
            <description>Notification mail</description>
        </param>
        <param name="reasonsForRequest" type="string">
            <description>Reason for request</description>
        </param>
        <param name="createdOn" type="Date">
            <description>Created on</description>
        </param>
        <param name="bgName" type="string">
            <description>Business group</description>
        </param>
        <param name="access" type="string">
            <description>Access protocol</description>
        </param>
        <param name="webdavAccess" type="boolean">
            <description>WebDAV access?</description>
        </param>
        <param name="backupPlan" type="string">
            <description>Backup plan</description>
        </param>
        <param name="targetEnv" type="string">
            <description>Target NAS env.</description>
        </param>
        <param name="targetTenant" type="string">
            <description>Target NAS tenant (same as vRA)</description>
        </param>
        <param name="svm" type="string">
            <description>vServer</description>
        </param>
        <param name="bgId" type="string"/>
    </input>
    <output>
        <param name="result" type="SQL:ActiveRecord">
            <description>Mapped record object to a database record.</description>
        </param>
    </output>
    <attrib name="errorCode" type="String">
        <value encoded="n"/>
        <description>errorCode</description>
    </attrib>
    <attrib name="volumeTable" type="SQL:Table" conf-id="f82ad97a-cc4f-40e5-966a-b389e1ab21f7" conf-key="volumeTable">
        <description>Reference to the Table object</description>
    </attrib>
    <attrib name="columns" type="Any">
        <value encoded="n"/>
        <description>Colums to be updated in the db</description>
    </attrib>
    <attrib name="volumeArchiveTable" type="SQL:Table" conf-id="f82ad97a-cc4f-40e5-966a-b389e1ab21f7" conf-key="volumeArchiveTable"/>
    <attrib name="isUnique" type="boolean">
        <value encoded="n">true</value>
    </attrib>
    <workflow-item name="item0" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="218.13636363636363" x="185.0"/>
    </workflow-item>
    <workflow-item name="item1" throw-bind-name="errorCode" type="end" end-mode="1" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="127.72727272727272" x="345.0"/>
    </workflow-item>
    <workflow-item name="item2" out-name="item3" catch-name="item1" throw-bind-name="errorCode" type="task" business-status="volumeTabe" comparator="0">
        <display-name>volumeTable</display-name>
        <script encoded="false">
columns = {
	volType : volType,
	volId : volId,
	volName : volName,
	access : access,
	svm : svm,
	targetEnv : targetEnv,
	targetTenant : targetTenant,
	webdavAccess : webdavAccess,
	backupPlan : backupPlan,
	deploymentTag : deploymentTag,
	requestor : requestor,
	notificationMail : notificationMail,
	reasonsForRequest : reasonsForRequest,
	createdOn : createdOn,
	bgName : bgName,
	bgId: bgId
};
result = volumeTable.createRecord(columns, isUnique);
System.debug("Created volume '" + volName + "'("+ volId + ") in "+volumeTable.name);
</script>
        <in-binding>
            <bind name="volType" type="string" export-name="volType">
                <description>Voltype</description>
            </bind>
            <bind name="volName" type="string" export-name="volName">
                <description>Volname</description>
            </bind>
            <bind name="deploymentTag" type="string" export-name="deploymentTag">
                <description>Deploymenttag</description>
            </bind>
            <bind name="requestor" type="string" export-name="requestor">
                <description>Requestor</description>
            </bind>
            <bind name="notificationMail" type="string" export-name="notificationMail">
                <description>Notificationmail</description>
            </bind>
            <bind name="reasonsForRequest" type="string" export-name="reasonsForRequest">
                <description>Reasonsforrequest</description>
            </bind>
            <bind name="createdOn" type="Date" export-name="createdOn">
                <description>Createdon</description>
            </bind>
            <bind name="bgName" type="string" export-name="bgName">
                <description>Bgname</description>
            </bind>
            <bind name="access" type="string" export-name="access">
                <description>Accessprotocol</description>
            </bind>
            <bind name="webdavAccess" type="boolean" export-name="webdavAccess">
                <description>Webdavaccess</description>
            </bind>
            <bind name="backupPlan" type="string" export-name="backupPlan">
                <description>Backupplan</description>
            </bind>
            <bind name="targetEnv" type="string" export-name="targetEnv">
                <description>Targetenv</description>
            </bind>
            <bind name="targetTenant" type="string" export-name="targetTenant">
                <description>Targettenant</description>
            </bind>
            <bind name="svm" type="string" export-name="svm">
                <description>Vserver</description>
            </bind>
            <bind name="isUnique" type="boolean" export-name="isUnique"/>
            <bind name="volumeTable" type="SQL:Table" export-name="volumeTable"/>
            <bind name="volId" type="string" export-name="volId"/>
            <bind name="bgId" type="string" export-name="bgId"/>
        </in-binding>
        <out-binding>
            <bind name="columns" type="Any" export-name="columns"/>
            <bind name="result" type="SQL:ActiveRecord" export-name="result">
                <description>Mapped record object to a database record.</description>
            </bind>
        </out-binding>
        <position y="100.0" x="140.0"/>
    </workflow-item>
    <workflow-item name="item3" out-name="item0" catch-name="item1" throw-bind-name="errorCode" type="task" business-status="volumeArchiveTable" comparator="0">
        <display-name>volumeArchiveTable</display-name>
        <script encoded="false">function set_crits(columns) {
	if (/^epfl_/.test(columns.bgName)) { // EPFL, what about research? 
		// Update this critX: bgInfo.name has the form a_b_c, where a and b cannot contain _, while c spreads to the end of the name
		s = columns.bgName.split('_');
		columns.crit1 = s[0]
		columns.crit2 = s[1];
		columns.crit3 = s.splice(2).join('_');
		System.debug("bgName = '" + columns.bgName + "' =&gt; crit1 = '" + columns.crit1 + "'. crit2 = '" + columns.crit2 + "'. crit3 = '" + columns.crit3+"");
	}
}

// delete from archive first
var cols = {
	volId : columns.volId,
}
volumeArchiveTable.deleteRecords(cols, isUnique);

// set crit fields and create new archive entry:
set_crits(columns);
System.log(" *** columns ***\n" + JSON.stringify( columns, null, 2 ));
volumeArchiveTable.createRecord(columns, isUnique);
System.debug("Created volume '" + columns.volName + "'("+ columns.volId + ") in "+volumeArchiveTable.name);
</script>
        <in-binding>
            <bind name="columns" type="Any" export-name="columns">
                <description>Colums to be updated in the db</description>
            </bind>
            <bind name="volumeArchiveTable" type="SQL:Table" export-name="volumeArchiveTable"/>
            <bind name="isUnique" type="boolean" export-name="isUnique"/>
        </in-binding>
        <out-binding/>
        <position y="164.5" x="145.0"/>
    </workflow-item>
</ns2:workflow>
